// Code generated by protoc-gen-go. DO NOT EDIT.
// source: org.proto

package test

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Org struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Org) Reset()         { *m = Org{} }
func (m *Org) String() string { return proto.CompactTextString(m) }
func (*Org) ProtoMessage()    {}
func (*Org) Descriptor() ([]byte, []int) {
	return fileDescriptor_ccb462779e28924f, []int{0}
}

func (m *Org) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Org.Unmarshal(m, b)
}
func (m *Org) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Org.Marshal(b, m, deterministic)
}
func (m *Org) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Org.Merge(m, src)
}
func (m *Org) XXX_Size() int {
	return xxx_messageInfo_Org.Size(m)
}
func (m *Org) XXX_DiscardUnknown() {
	xxx_messageInfo_Org.DiscardUnknown(m)
}

var xxx_messageInfo_Org proto.InternalMessageInfo

func (m *Org) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Org) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type Id struct {
	Id                   string   `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Id) Reset()         { *m = Id{} }
func (m *Id) String() string { return proto.CompactTextString(m) }
func (*Id) ProtoMessage()    {}
func (*Id) Descriptor() ([]byte, []int) {
	return fileDescriptor_ccb462779e28924f, []int{1}
}

func (m *Id) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Id.Unmarshal(m, b)
}
func (m *Id) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Id.Marshal(b, m, deterministic)
}
func (m *Id) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Id.Merge(m, src)
}
func (m *Id) XXX_Size() int {
	return xxx_messageInfo_Id.Size(m)
}
func (m *Id) XXX_DiscardUnknown() {
	xxx_messageInfo_Id.DiscardUnknown(m)
}

var xxx_messageInfo_Id proto.InternalMessageInfo

func (m *Id) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func init() {
	proto.RegisterType((*Org)(nil), "test.Org")
	proto.RegisterType((*Id)(nil), "test.Id")
}

func init() { proto.RegisterFile("org.proto", fileDescriptor_ccb462779e28924f) }

var fileDescriptor_ccb462779e28924f = []byte{
	// 132 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xcc, 0x2f, 0x4a, 0xd7,
	0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x29, 0x49, 0x2d, 0x2e, 0x51, 0xd2, 0xe4, 0x62, 0xf6,
	0x2f, 0x4a, 0x17, 0xe2, 0xe3, 0x62, 0xca, 0x4c, 0x91, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x0c, 0x62,
	0xca, 0x4c, 0x11, 0x12, 0xe2, 0x62, 0xc9, 0x4b, 0xcc, 0x4d, 0x95, 0x60, 0x02, 0x8b, 0x80, 0xd9,
	0x4a, 0x22, 0x5c, 0x4c, 0x9e, 0x29, 0x20, 0x95, 0x9e, 0x70, 0x95, 0x9e, 0x29, 0x46, 0x1a, 0x5c,
	0x5c, 0xfe, 0x45, 0xe9, 0xc1, 0xa9, 0x45, 0x65, 0x99, 0xc9, 0xa9, 0x42, 0x52, 0x5c, 0xcc, 0xee,
	0xa9, 0x25, 0x42, 0x1c, 0x7a, 0x20, 0xc3, 0xf5, 0x3c, 0x53, 0xa4, 0x38, 0x21, 0x2c, 0xff, 0xa2,
	0xf4, 0x24, 0x36, 0xb0, 0xbd, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0x8c, 0x45, 0xb4, 0x50,
	0x84, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// OrgServiceClient is the client API for OrgService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type OrgServiceClient interface {
	Get(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Org, error)
}

type orgServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOrgServiceClient(cc grpc.ClientConnInterface) OrgServiceClient {
	return &orgServiceClient{cc}
}

func (c *orgServiceClient) Get(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Org, error) {
	out := new(Org)
	err := c.cc.Invoke(ctx, "/test.OrgService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrgServiceServer is the server API for OrgService service.
type OrgServiceServer interface {
	Get(context.Context, *Id) (*Org, error)
}

// UnimplementedOrgServiceServer can be embedded to have forward compatible implementations.
type UnimplementedOrgServiceServer struct {
}

func (*UnimplementedOrgServiceServer) Get(ctx context.Context, req *Id) (*Org, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}

func RegisterOrgServiceServer(s *grpc.Server, srv OrgServiceServer) {
	s.RegisterService(&_OrgService_serviceDesc, srv)
}

func _OrgService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/test.OrgService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgServiceServer).Get(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

var _OrgService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "test.OrgService",
	HandlerType: (*OrgServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _OrgService_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "org.proto",
}
